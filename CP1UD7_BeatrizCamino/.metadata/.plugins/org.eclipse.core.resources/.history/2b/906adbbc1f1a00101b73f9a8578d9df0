
public abstract class Coche {
	
	//atributos de la clase abstracta, más el atributo estático, que nos ayuda a que su valor se conserve.
	private String matricula;
	private String color;
	private String modelo;
	private double precio;
	private int kms;
	static int numCochesStock;
	
	//constructores superclase, sin parámetros y con parámetros.
	
	public Coche () {
		numCochesStock++;
	};
	
	public Coche (String matricula, String color, String modelo, double precio, int kms) {
		this.matricula = matricula;
		this.color = color;
		this.modelo = modelo;
		this.precio = precio;
		this.kms = kms;
		numCochesStock++;
	};
	
	//matricula
	
	public void setMatricula(String matricula){
		this.matricula = matricula;
	}
	
	public String getMatricula(){
		return matricula;
	}
	
	//color
	
	public String getColor() {
		return color;
	}

	public void setColor(String color) {
		this.color = color;
	}
	
	//modelo

	public String getModelo() {
		return modelo;
	}

	public void setModelo(String modelo) {
		this.modelo = modelo;
	}

	//precio
	
	public double getPrecio() {
		return precio;
	}

	public void setPrecio(double precio) {
		this.precio = precio;
	}

	//kms
	
	public int getKms() {
		return kms;
	}

	public void setKms(int kms) {
		this.kms = kms;
	}

	//numCochesStock - contador que irá sumando +1 con cada coche creado.
	
	public static int getNumCochesStock() {
		return numCochesStock;
	}

	public static void setNumCochesStock(int numCochesStock) {
		Coche.numCochesStock = numCochesStock;
	}

	//sobreescritura del método toString en superclase.
	
	public String toString() {
		return "Matricula: " + matricula + ". Modelo: " + modelo + ".Color: " + color + ".Kilómetros: " + 
				kms + ". Precio: " +  precio + ". ";
	}
	
	//método abstracto que cada subclase deberá desarrollar.
	public abstract void registrar();
}
